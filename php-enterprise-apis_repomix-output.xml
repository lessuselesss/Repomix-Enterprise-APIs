This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  C_CERTIFICATE.php
  CEP_Account.php
  helper.php
.gitignore
composer.json
LICENSE
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/C_CERTIFICATE.php">
<?php
namespace Circularprotocol\Circularenterpriseapis;
require_once __DIR__ . '/helper.php'; // Ensure this points to the correct location of your helper.php file


use Elliptic\EC;
use DateTime;
use DateTimeZone;
use Exception;

/*******************************************************************************
 * Circular Certificate Class for certificate chaining
 */
class C_CERTIFICATE {
    private $data;
    public $previousTxID;
    public $previousBlock;

    public function __construct() {
        $this->data = null;
        $this->previousTxID = null;
        $this->previousBlock = null;
    }

    /**
     * Insert application data into the certificate
     * @param string $data Data content
     */
    public function setData(string $data): void {
        $this->data = stringToHex($data);
    }

    /**
     * Extract application data from the certificate
     * @return string Data content
     */
    public function getData(): string {
        return hexToString($this->data);
    }

    /**
     * Get the certificate in JSON format
     * @return string JSON-encoded certificate
     */
    public function getJSONCertificate(): string {
        $certificate = [
            "data" => $this->getData(),
            "previousTxID" => $this->previousTxID,
            "previousBlock" => $this->previousBlock,
            "version" => LIB_VERSION
        ];
        return json_encode($certificate);
    }

    /**
     * Get the size of the certificate in bytes
     * @return int Size of the certificate
     */
    public function getCertificateSize(): int {
        return strlen($this->getJSONCertificate());
    }
}
</file>

<file path="src/CEP_Account.php">
<?php
namespace Circularprotocol\Circularenterpriseapis;
require_once __DIR__ . '/helper.php'; // Ensure this points to the correct location of your helper.php file


use Elliptic\EC;
use DateTime;
use DateTimeZone;
use Exception;

/*******************************************************************************
 * Circular Account Class
 */
class CEP_Account {
    public $address;
    public $publicKey;
    public $info;
    public $codeVersion;
    public $lastError;
    public $NAG_URL;
    public $NETWORK_NODE;
    public $blockchain;
    public $LatestTxID;
    public $Nonce;
    public $data;
    public $intervalSec;

    public function __construct() {
        $this->address = null;
        $this->publicKey = null;
        $this->info = null;
        $this->codeVersion = LIB_VERSION;
        $this->lastError = '';
        $this->NAG_URL = DEFAULT_NAG;
        $this->NETWORK_NODE = '';
        $this->blockchain = DEFAULT_CHAIN;
        $this->LatestTxID = '';
        $this->Nonce = 0;
        $this->data = [];
        $this->intervalSec = 2;
    }

    /**
     * Open an account by retrieving all the account info
     * @param string $address Account address
     * @return bool True if successful, false otherwise
     */
    public function open(string $address): bool {
        if (empty($address)) {
            $this->lastError = "Invalid address";
            return false;
        }
        $this->address = $address;
        return true;
    }

    /**
     * Update the account data and Nonce field
     * @return bool True if successful, false otherwise
     */
    public function updateAccount(): bool {
        if (empty($this->address)) {
            $this->lastError = "Account not open";
            return false;
        }

        $data = [
            "Blockchain" => hexFix($this->blockchain),
            "Address" => hexFix($this->address),
            "Version" => $this->codeVersion,
        ];

        $options = [
            'http' => [
                'header' => "Content-type: application/json\r\n",
                'method' => 'POST',
                'content' => json_encode($data),
            ],
        ];

        $context = stream_context_create($options);

        try {
            $response = file_get_contents($this->NAG_URL."Circular_GetWalletNonce_", false, $context);

            if ($response === false) {
                throw new Exception("Network error: " . error_get_last()['message']);
            }

            $responseData = json_decode($response, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception("Invalid JSON response: " . json_last_error_msg());
            }

            if ($responseData['Result'] == 200 && isset($responseData['Response']['Nonce'])) {
                $this->Nonce = $responseData['Response']['Nonce'] + 1;
                return true;
            } else {
                $this->lastError = "Invalid response format or missing Nonce field";
                return false;
            }
        } catch (Exception $e) {
            $this->lastError = "Network error: " . $e->getMessage();
            return false;
        }
    }

    /**
     * Set the blockchain network
     * @param string $network Network name (e.g., 'devnet', 'testnet', 'mainnet')
     * @return string URL of the network
     * @throws Exception If network URL cannot be fetched
     */
    public function setNetwork(string $network): string {
        $nagUrl = NETWORK_URL . urlencode($network);

        try {
            $response = file_get_contents($nagUrl);
            if ($response === false) {
                throw new Exception("Failed to fetch URL: " . error_get_last()['message']);
            }

            $data = json_decode($response, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception("Failed to parse JSON: " . json_last_error_msg());
            }

            if (isset($data['status']) && $data['status'] === 'success' && isset($data['url'])) {
                return $data['url'];
            } else {
                throw new Exception($data['message'] ?? 'Failed to get URL');
            }
        } catch (Exception $e) {
            error_log('Error fetching network URL: ' . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Set the blockchain address
     * @param string $blockchain Blockchain address
     */
    public function setBlockchain(string $blockchain): void {
        $this->blockchain = $blockchain;
    }

    /**
     * Close the account
     */
    public function close(): void {
        $this->address = null;
        $this->publicKey = null;
        $this->info = null;
        $this->lastError = '';
        $this->NAG_URL = null;
        $this->NETWORK_NODE = null;
        $this->blockchain = null;
        $this->LatestTxID = null;
        $this->data = null;
        $this->Nonce = 0;
        $this->intervalSec = 0;
    }

    /**
     * Sign data using the account's private key
     * @param string $data Data to sign
     * @param string $privateKey Private key
     * @param string $address Account address
     * @return string Signature
     * @throws Exception If account is not open
     */
    public function signData(string $data, string $privateKey, string $address): string {
        if (empty($this->address)) {
            throw new Exception("Account is not open");
        }

        $ec = new EC('secp256k1');
        $key = $ec->keyFromPrivate(hexFix($privateKey), 'hex');
        $msgHash = hash('sha256', $data);

        $signature = $key->sign($msgHash)->toDER('hex');
        return $signature;
    }


    /** 
     * Get th 
    */
    public function getTransactionbyID(string $TxID, int $Start, int $End): array {
        // Prepare the data for the request
        $data = [
            "Blockchain" => hexFix($this->blockchain),
            "ID" => hexFix($TxID),
            "Start" => strval($Start),
            "End" => strval($End),
            "Version" => $this->codeVersion
        ];
    
        // Prepare the URL
        $url = $this->NAG_URL . 'Circular_GetTransactionbyID_' . $this->NETWORK_NODE;
    
        // Use cURL to send the request
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    
        // Execute the request
        $response = curl_exec($ch);

    
        // Check for cURL errors
        if (curl_errno($ch)) {
            $error = curl_error($ch);
            curl_close($ch);
            throw new Exception("cURL error: " . $error);
        }
    
        // Get the HTTP status code
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
    
        // Check if the response is successful
        if ($httpCode !== 200) {
            throw new Exception("Network response was not ok. HTTP Code: " . $httpCode);
        }
    
        // Decode the JSON response
        $responseData = json_decode($response, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Invalid JSON response: " . json_last_error_msg());
        }
    
        return $responseData;
    }

    /**
     * Search for a transaction by its ID
     * @param int $blockNum Block number
     * @param string $txID Transaction ID
     * @return array Transaction data
     * @throws Exception If network request fails
     */
    public function getTransaction(int $blockNum, string $txID): array {
        $data = [
            "Blockchain" => hexFix($this->blockchain),
            "ID" => hexFix($txID),
            "Start" => strval($blockNum),
            "End" => strval($blockNum),
            "Version" => $this->codeVersion
        ];

        $url = $this->NAG_URL . 'Circular_GetTransactionbyID_' . $this->NETWORK_NODE;

        $options = [
            'http' => [
                'header' => "Content-type: application/json\r\n",
                'method' => 'POST',
                'content' => json_encode($data),
            ],
        ];

        $context = stream_context_create($options);

        try {
            $response = file_get_contents($url, false, $context);
            if ($response === false) {
                throw new Exception('Network response was not ok: ' . error_get_last()['message']);
            }

            $jsonResponse = json_decode($response, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception('Invalid JSON response: ' . json_last_error_msg());
            }

            return $jsonResponse;
        } catch (Exception $e) {
            error_log('Error: ' . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Submit data to the blockchain
     * @param string $blockchain Blockchain address
     * @param string $address Account address
     * @return array Response data
     * @throws Exception If account is not open
     */
    public function submitCertificate(string $pdata, string $privateKey): array {
        if (empty($this->address)) {
            throw new Exception("Account is not open");
        }
    
        // Prepare the payload object
        $PayloadObject = [
            "Action" => "CP_CERTIFICATE",
            "Data" => stringToHex($pdata)
        ];
        
        // Convert payload object to JSON and then to hex
        $jsonstr = json_encode($PayloadObject);
        $Payload = stringToHex($jsonstr);
    
        // Get the current timestamp
        $Timestamp = getFormattedTimestamp();
    
        // Create the string for hashing
        $str = hexFix($this->blockchain) . hexFix($this->address) . hexFix($this->address) . $Payload . $this->Nonce . $Timestamp;
    
        // Generate the ID using SHA-256
        $ID = hash('sha256', $str);
    
        // Sign the data
        $Signature = $this->signData($ID, $privateKey, $this->address);
    
        // Prepare the data for the request
        $data = [
            "ID" => $ID,
            "From" => hexFix($this->address),
            "To" => hexFix($this->address),
            "Timestamp" => $Timestamp,
            "Payload" => $Payload,
            "Nonce" => strval($this->Nonce),
            "Signature" => $Signature,
            "Blockchain" => hexFix($this->blockchain),
            "Type" => 'C_TYPE_CERTIFICATE',
            "Version" => $this->codeVersion
        ];
    
        // Prepare the URL
        $url = $this->NAG_URL . 'Circular_AddTransaction_' . $this->NETWORK_NODE;

        // Use cURL to send the request
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    
        // Execute the request
        $response = curl_exec($ch);
    
        // Check for errors
        if (curl_errno($ch)) {
            $error = curl_error($ch);
            curl_close($ch);
            throw new Exception("cURL error: " . $error);
        }
    
        // Get the HTTP status code
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
    
        // Check if the response is successful
        if ($httpCode !== 200) {
            throw new Exception("Network response was not ok. HTTP Code: " . $httpCode);
        }
    
        // Decode the JSON response
        $responseData = json_decode($response, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Invalid JSON response: " . json_last_error_msg());
        }
    
        return $responseData;
    }

    /**
     * Recursively poll for transaction finality
     * @param string $TxID Transaction ID
     * @param int $intervalSec Polling interval in seconds
     * @return array Transaction outcome
     * @throws Exception If timeout is exceeded
     */
    public function getTransactionOutcome(string $TxID, int $timeout) {

        $startTime = time();

        while (true) {
            $elapsedTime = time() - $startTime;
            if ($elapsedTime > $timeout) {
                print_r($transactionData);
                throw new Exception('Timeout exceeded');
            }

            $transactionData = $this->getTransactionbyID($TxID, 0, 10);
            if ($transactionData && $transactionData['Result'] === 200 &&
                $transactionData['Response'] !== 'Transaction Not Found' &&
                $transactionData['Response']['Status'] !== 'Pending') {
                return $transactionData['Response'];
            }

            sleep($this->intervalSec);
        }

    }
}
</file>

<file path="src/helper.php">
<?php
/******************************************************************************* 

        CIRCULAR Enterprise APIs for Data Certification
         
        License : Open Source for private and commercial use
                     
        CIRCULAR GLOBAL LEDGERS, INC. - USA
                     
        Version : 1.0.1
                     
        Creation: 3/3/2025
        Update  : 3/3/2025
                  
        Originator: Gianluca De Novi, PhD
        Contributors: Danny De Novi           
        
*******************************************************************************/

namespace Circularprotocol\Circularenterpriseapis;

use Elliptic\EC;
use DateTime;
use DateTimeZone;
use Exception;

// Global Constants
define('LIB_VERSION', '1.0.13');
define('NETWORK_URL', 'https://circularlabs.io/network/getNAG?network=');
define('DEFAULT_CHAIN', '0x8a20baa40c45dc5055aeb26197c203e576ef389d9acb171bd62da11dc5ad72b2');
define('DEFAULT_NAG', 'https://nag.circularlabs.io/NAG.php?cep=');

// HELPER FUNCTIONS

/**
 * Function to add a leading zero to numbers less than 10
 * @param int $num Number to pad
 * @return string Padded number
 */
function padNumber(int $num): string {
    return $num < 10 ? '0' . $num : (string)$num;
}

/**
 * Function to get the current timestamp in the format YYYY:MM:DD-HH:MM:SS
 * @return string Formatted timestamp
 */
function getFormattedTimestamp(): string {
    $date = new DateTime('now', new DateTimeZone('UTC'));
    return $date->format('Y:m:d-H:i:s');
}

/**
 * Removes '0x' from hexadecimal numbers if they have it
 * @param string $hex Hexadecimal string
 * @return string Cleaned hexadecimal string
 */
function hexFix(string $hex): string {
    return str_replace('0x', '', $hex);
}

/**
 * Convert a string to its hexadecimal representation without '0x'
 * @param string $string Input string
 * @return string Hexadecimal representation
 */
function stringToHex(string $string): string {
    return hexFix(bin2hex($string));
}

/**
 * Convert a hexadecimal string to a regular string
 * @param string $hex Hexadecimal string
 * @return string Regular string
 */
function hexToString(string $hex): string {
    return hex2bin($hex);
}
</file>

<file path=".gitignore">
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
# but not Directory.Build.rsp, as it configures directory-level build defaults
!Directory.Build.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.tlog
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio 6 auto-generated project file (contains which files were open etc.)
*.vbp

# Visual Studio 6 workspace and project file (working project files containing files to include in project)
*.dsw
*.dsp

# Visual Studio 6 technical files
*.ncb
*.aps

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# Visual Studio History (VSHistory) files
.vshistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd

# VS Code files for those working on multiple tools
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows Installer files from build outputs
*.cab
*.msi
*.msix
*.msm
*.msp

# JetBrains Rider
*.sln.iml
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Circular Protocol

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="composer.json">
{
    "name": "circularprotocol/circular-enterprise-apis",
    "description": "Official Circular Enterprise APIs",
    "type": "library",
    "require": {
        "simplito/elliptic-php": "^1.0"
    },
    "require-dev": {
        "simplito/elliptic-php": "^1.0"
    },
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "Circularprotocol\\Circularenterpriseapis\\": "src/"
        }
    },
    "authors": [
        {
            "name": "Danny De Novi"
        }
    ]
}
</file>

<file path="README.md">
# Circular Enterprise PHP APIs for Data Certification

This repository provides PHP implementations of the **Circular Enterprise APIs** for data certification and blockchain integration. It includes classes and helper functions to interact with the Circular network, submit certificates, retrieve transactions, and manage accounts.

## Features

- **Data Certification**: Submit data to the blockchain for certification.
- **Transaction Retrieval**: Fetch transaction details by ID or block range.
- **Account Management**: Open, update, and close accounts.
- **Secure Signing**: Sign data using elliptic curve cryptography (secp256k1).
- **Network Integration**: Connect to different blockchain networks (mainnet, testnet, devnet).

---

## Installation

You can install this library using **Composer** or by **cloning the repository**.

### Option 1: Install via Composer (Recommended)

1. Run the following command in your project directory:
   ```bash
   composer require circularprotocol/circular-enterprise-apis
   ```

2. Include the Composer autoloader in your PHP script:
   ```php
   require_once __DIR__ . '/vendor/autoload.php';
   ```

### Option 2: Clone the Repository

1. Clone the repository:
   ```bash
   git clone https://github.com/circular-protocol/circular-php.git
   cd circular-enterprise-apis
   ```

2. Install dependencies using Composer:
   ```bash
   composer install
   ```

3. Include the autoloader in your PHP script:
   ```php
   require_once __DIR__ . '/vendor/autoload.php';
   ```

---

## Usage

### 1. Opening an Account
To open an account and retrieve account details:
```php
use Circularprotocol\Circularenterpriseapis\CEP_Account;

$account = new CEP_Account();
$account->open('a4fc8b11bfc5dc2911ab41871e6de81f500fe60f3961343b202ad78e7e297ea08');

echo "Account opened successfully.\n";
```

### 2. Chosing a network and the blockchain:
```php
$blockchain = 'blockchain-address';
$account->setNetwork("testnet"); // chose between multiple networks such as testnet, devnet and mainnet
$account->setBlockchain($blockchain);
```

### 3. Retrieve account informations
Update account informations such as Nonce:
```php
if($account->updateAccount()){
 //...
}
```

### 4. Submitting a Certificate
To submit data for certification:
```php
$pdata = 'Your data to certify';
$privateKey = 'your_private_key_here';

try {
    $response = $account->submitCertificate($pdata, $privateKey);
    print_r($response);
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}
```

### 5. Retrieving a Transaction
To fetch transaction details:
```php
//...
$resp = $account->getTransactionOutcome($txID, 10);
if ($resp["BlockID"]) {
  $blockID = $resp["BlockID"];
  $status = $account->getTransaction($blockID, $txID);

  if ($status == 200) {
      echo "Transaction Status: " .
          $status["Response"]["Status"] .
          "\n";

      $account->close();
  } else {
      echo "Error on retrieving transaction";
  }
} else {
  echo "Error on retrieving transaction status";
}
//...
```


---

## Helper Functions

- **`hexFix(string $hex)`**: Removes `0x` from hexadecimal strings.
- **`stringToHex(string $string)`**: Converts a string to its hexadecimal representation.
- **`hexToString(string $hex)`**: Converts a hexadecimal string back to a regular string.
- **`getFormattedTimestamp()`**: Returns the current timestamp in `YYYY:MM:DD-HH:MM:SS` format.

---

## Example Workflow

1. Open an account.
2. Set network and blockchain info
3. Submit data for certification.
4. Retrieve the transaction ID from the response.
5. Fetch transaction details using the TxID and the BlockID.

```php
<?php

require_once __DIR__ . "/vendor/autoload.php"; // IF NEEDED
require_once __DIR__ . "/src/CircularEnterpriseAPIS-php"; // IF NEEDED

use Circularprotocol\Circularenterpriseapis\CEP_Account;

try {
    // Instantiate the CEP Account class
    $account = new CEP_Account();
    echo "CEP_Account instantiated successfully.\n";

    $address = "your-account-address";
    $pk = "your-private-key"; // Note: pk should be a string, not a hex literal
    $blockchain = "blockchain-address"; // Same here, string.
    $txID = ""; // Initialize txID
    $txBlock = ""; // Initialize txBlock

    $account->setNetwork("testnet"); // chose between multiple networks such as testnet, devnet and mainnet
    $account->setBlockchain($blockchain);
    echo "Test variables set.\n";

    if ($account->open($address)) {
        echo "Account opened successfully.\n";

        if ($account->updateAccount()) {
            echo "Nonce: " . $account->Nonce . "\n";

            $txIDTemp = $account->submitCertificate(
                "your-data-to-certificate",
                "1de4fc4d951349a382c9ca58e6c82feeed8a233657683455080338675ad7e61f"
            );
            if ($txIDTemp["Result"] == 200) {
                $txID = $txIDTemp["Response"]["TxID"];
                echo "TxID: " . $txID . "\n";

                $resp = $account->getTransactionOutcome($txID, 10);
                if ($resp["BlockID"]) {
                    $blockID = $resp["BlockID"];
                    $status = $account->getTransaction($blockID, $txID);

                    if ($status == 200) {
                        echo "Transaction Status: " .
                            $status["Response"]["Status"] .
                            "\n";

                        $account->close();
                    } else {
                        echo "Error on retrieving transaction";
                    }
                } else {
                    echo "Error on retrieving transaction status";
                }
            } else {
                echo "Certificate submission error";
            }
        } else {
            echo "Update Account Error: " . $account->lastError . "\n";
        }
    } else {
        echo "Failed to open account: " . $account->lastError . "\n";
    }
} catch (Exception $e) {
    echo "An error occurred: " . $e->getMessage() . "\n";
}

?>
```

---

## Contributing

Contributions are welcome! If you'd like to contribute, please follow these steps:
1. Fork the repository.
2. Create a new branch for your feature or bugfix.
3. Submit a pull request with a detailed description of your changes.

---

## License

This project is licensed under the **MIT License**. See the [LICENSE](LICENSE) file for details.

---

## Support

For questions or issues, please open an issue on the [GitHub repository](https://github.com/circular-protocol/circular-php/issues).

---

This version of the `README.md` includes installation via Composer, making it easier for users to integrate the library into their projects. It also provides clear examples and a structured workflow for using the API. Let me know if you need further adjustments!
</file>

</files>
